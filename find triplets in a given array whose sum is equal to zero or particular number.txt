
/*
// C++ program to find triplets in a given
// array whose sum is zero
#include<bits/stdc++.h>
using namespace std;

// function to print triplets with 0 sum
void findTriplets(int arr[], int n)
{
    int  found = -1;

    // sort array elements
    sort(arr, arr+n);
    for(int i=0;i<n-2;i++)
    {
        int l = i+1;
        int h = n-1;
        while(l<h)
        {
        if(arr[i]+arr[l]+arr[h]==0)
        {
         
            found = 1;
            break;
        }
        else if(arr[i]+arr[l]+arr[h]<0)
          l++;
        else
          h--;

        }
    }
    //return 0;
     cout<<found<<endl;
}

// Driven source
int main()
{

int arr[] = {-1,2,3,-2};
int n = sizeof(arr)/sizeof(arr[0]);
findTriplets(arr, n);

return 0;
}*/










///////////////////////////////////////////////////////////////////////ITERATIVE METHOD ////////////////////////////
//////But its time complexity is O(n^3) bec.. here we will use three loop

/*
// A simple C++ program to find three elements
// whose sum is equal to zero
#include<bits/stdc++.h>
using namespace std;

// Prints all triplets in arr[] with 0 sum
void findTriplets(int arr[], int n)
{
    bool found = false;
    for (int i=0; i<n-2; i++)
    {
        for (int j=i+1; j<n-1; j++)
        {
            for (int k=j+1; k<n; k++)
            {
                if (arr[i]+arr[j]+arr[k] == 0)
                {
                    //cout << arr[i] << " "
                         //<< arr[j] << " "
                         //<< arr[k] <<endl;
                    found = true;
                    break;
                }
                
            }
        }
        
    }
    cout<<found<<endl;

    // If no triplet with 0 sum found in array
    //if (found == false)
        //cout << " not exist "<<endl;

}

// Driver code
int main()
{
    int arr[] = {0, 1, 2, 3, 1};
    int n = sizeof(arr)/sizeof(arr[0]);
    findTriplets(arr, n);
    return 0;
}
*/




